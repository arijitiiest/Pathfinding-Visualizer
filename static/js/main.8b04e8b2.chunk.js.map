{"version":3,"sources":["App/data/routes.js","App/components/Nav/Hamburger.js","App/components/Nav/Nav.js","App/data/algorithms.js","App/components/buttons/AlgorithmButton.js","App/components/buttons/ClearPathButton.js","App/components/buttons/ClearWallsButton.js","App/components/buttons/VisualizeButton.js","App/data/nodeStatus.js","App/components/buttons/NodeStatusInput.js","App/components/buttons/ClearBoardButton.js","App/components/buttons/SpeedButton.js","App/data/speed.js","App/layouts/header/Header.js","App/components/desc/Description.js","App/layouts/main/Main.js","App/components/Node/Node.js","App/Algorithms/dijkstra.js","App/Algorithms/A*.js","App/Algorithms/bfs.js","App/Algorithms/dfs.js","App/Algorithms/greedy.js","App/components/container/Container.js","App/views/PathfindingVisualizer.js","App/data/constants.js","App.js","serviceWorker.js","index.js"],"names":["routes","path","label","index","Hamburger","links","map","data","idx","href","key","right","width","disableAutoFocus","Nav","logo","filter","className","algorithms","name","desc","AlgorithmButton","props","dropdown","value","running","onChange","e","setAlgorithm","target","bind","hidden","ClearPathButton","onClick","setClearPath","ClearWallsButton","setClearWalls","VisualizeButton","setStart","algo","nodeStatus","NodeStatusInput","setNodeStatus","ClearBoardButton","setClearBoard","SpeedButton","setSpeed","Header","Description","algorithm","algoDesc","style","marginLeft","marginRight","cursor","Main","children","Node","row","col","isWall","isStart","isEnd","node_status","id","onMouseDown","preventDefault","onMouseEnter","onMouseUp","dijkstraVisitedNodesInOrder","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","neighbor","getUnvisitedNeighbors","previousNode","getNeighbors","ret","found","dfsVisitedNodesInOrder","dfsUtil","currentNode","i","shortestPathInOrder","nodesInShortestPathOrder","unshift","clearVisitedNode","newGrid","slice","j","document","getElementById","classList","remove","Container","startNodePos","finishNodePos","speed","node1","node2","openList","closeList","lowInd","f","splice","indexOf","gScore","g","gScoreIsBest","h","Math","abs","aStartVisitedNodesInOrder","queue","bfsVisitedNodesInOrder","greedyVisitedNodesInOrder","setTimeout","add","shortestPathNodesInOrder","alert","animateShortestPath","animateAlgorithm","rowArray","rowIdx","nodeIdx","START_NODE_ROW","START_NODE_COL","END_NODE_ROW","END_NODE_COL","PathfindingVisualizer","setAlgorithmHandler","setState","setNodeStatusHandler","status","node_status_input","clearPathHandler","state","clearWallsHandler","createInitialGrid","clearBoardHandler","setSpeedHandler","isStartHandler","mouseDownHandler","getNewGridWithNewStartEnd","getNewGridWithWallToggled","mouseIsPressed","mouseEnterHandler","mouseUpHandler","this","Component","createNode","wall","newNode","prevNode","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8b04e8b2.chunk.js","sourcesContent":["const routes = [\n    {\n        path: 'https://arijitiiest.github.io',\n        label: 'ARIJIT CHOWDHURY',\n        index: true\n    },\n    {\n        path: 'https://arijitiiest.github.io/about',\n        label: 'ABOUT'\n    },\n    {\n        path: 'https://arijitiiest.github.io/resume',\n        label: 'RESUME'\n    },\n    {\n        path: 'https://arijitiiest.github.io/projects',\n        label: 'PROJECTS'\n    },\n    {\n        path: 'https://arijitiiest.github.io/contact',\n        label: 'CONTACT'\n    }\n];\n\nexport default routes;","import React from \"react\";\nimport { stack as Menu } from \"react-burger-menu\";\n\nimport routes from \"../../data/routes\";\n\nconst Hamburger = () => {\n  const links = routes.map((data, idx) => (\n    <a href={data.path} key={idx}>\n      {data.label}\n    </a>\n  ));\n  return (\n    <Menu right width={\"280px\"} disableAutoFocus>\n      {links}\n    </Menu>\n  );\n};\n\nexport default Hamburger;","import React from 'react';\n\nimport routes from '../../data/routes';\nimport './Nav.css';\nimport Hamburger from './Hamburger';\n\nconst Nav = () => {\n    const logo = routes\n    .filter(data => data.index)\n    .map((data, idx) => (\n      <a className=\"header_logo-link\" href={data.path} key={idx}>\n        {data.label}\n      </a>\n    ));\n\n    const links = routes\n    .filter(data => !data.index)\n    .map((data, idx) => (\n      <a\n        className=\"header_navigation-items-link\"\n        href={data.path}\n        key={idx}\n      >\n        {data.label}\n      </a>\n    ));\n\n    return(\n        <header className=\"header\">\n      <nav className=\"header_navigation\">\n        <div className=\"header_logo\"> {logo} </div>\n        <div className=\"header_navigation-items\">\n          <ul>{links}</ul>\n        </div>\n      </nav>\n      <div className=\"header_toggle-button\">\n        <Hamburger />\n      </div>\n    </header>\n    )\n}\n\nexport default Nav;","const algorithms = [\n   {\n       label: 'Dijkstra',\n       name: \"Dijkstra's Algorithm\",\n       desc: \"Dijkstra's Algorithm is weighted and guarantees the shortest path!!\"\n   },\n   {\n        label: 'A*',\n        name: 'A Star Algorithm',\n        desc: \"A Star Algorithm is weighted and guarantees the shortest path!!\"\n   },\n   {\n       label: 'BFS',\n       name: 'Breadth-First-Search',\n       desc: \"Breadth-First-Search Algorithm is unweighted and guarantees the shortest path!!\"\n    },\n    {\n        label: 'DFS',\n        name: 'Dapth-First-Search',\n        desc: \"Depth-First-Search Algorithm is unweighted and does not guarantees the shortest path!!\"\n    },\n    {\n        label: 'Greedy',\n        name: 'Greedy Best-First-Search',\n        desc: \"Best-First-Search Algorithm is weighted and does not guarantees the shortest path!!\"\n    },\n];\n\nexport default algorithms;","import React from 'react';\n\nimport './Button.css';\nimport algorithms from '../../data/algorithms';\n\nconst AlgorithmButton = props => {\n\n    const selectedAlgo = e => {\n        if (!props.running)\n            props.setAlgorithm(e.target.value);\n    }\n    \n    const dropdown = algorithms.map((data) => (\n        <option key={data.label} value={data.label} className=\"algo-option\">{data.name}</option>\n    ))\n\n    let running = '';\n    if (props.running) {\n        running = 'running';\n    } else {\n        running = '';\n    }\n\n    return (\n        <div>\n            <select className={`button ${running}`} onChange={selectedAlgo.bind(this)}>\n                <option hidden={true}>Pathfinding Algorithms</option>\n                {dropdown}   \n            </select>\n\n        </div>\n    );\n}\n\nexport default AlgorithmButton;","import React from 'react';\n\nconst ClearPathButton = props => {\n    const clearPathHandler = () => {\n        if (!props.running) {\n            props.setClearPath();\n        }\n    }\n\n    let running = '';\n    if (props.running) {\n        running = 'running';\n    } else {\n        running = '';\n    }\n\n    return (\n        <button onClick={clearPathHandler} className={`button button_hover ${running}`} >Clear Path</button>\n    );\n}\n\nexport default ClearPathButton;","import React from 'react';\n\nconst ClearWallsButton = props => {\n    const clearWallsHandler = () => {\n        if (!props.running) {\n            props.setClearWalls();\n        }\n    }\n\n    let running = '';\n    if (props.running) {\n        running = 'running';\n    } else {\n        running = '';\n    }\n\n    return (\n        <button onClick={clearWallsHandler} className={`button button_hover ${running}`}>Clear Walls</button>\n    );\n}\n\nexport default ClearWallsButton;","import React from 'react';\n\nimport './Button.css';\n\nconst VisualizeButton = props => {\n    const startHandler = () => {\n        if (!running) {\n            props.setStart();\n        }\n    }\n\n    let running = '';\n    if (props.running) {\n        running = 'run';\n    } else {\n        running = '';\n    }\n\n    return (\n        <button onClick={startHandler} className={`button button_hover start ${running}`}>Visualize{ ' ' + props.algo}!</button>\n    );\n}\n\nexport default VisualizeButton;","const nodeStatus = [\n    {\n        label: 'wall',\n        name: 'Wall'\n    },\n    {\n        label: 'start_node',\n        name: 'Start Node'\n    },\n    {\n        label: 'end_node',\n        name: 'End Node'\n    }\n];\n\nexport default nodeStatus;","import React from 'react';\n\nimport './Button.css';\nimport nodeStatus from '../../data/nodeStatus';\n\nconst NodeStatusInput = props => {\n\n    const selectedNodeStatus = e => {\n        if (!props.running)\n            props.setNodeStatus(e.target.value);\n    }\n    \n    const dropdown = nodeStatus.map((data) => (\n        <option key={data.label} value={data.label}>Create {data.name}</option>\n    ))\n\n    let running = '';\n    if (props.running) {\n        running = 'running';\n    } else {\n        running = '';\n    }\n\n    return (\n        <div>\n            <select className={`button ${running}`} onChange={selectedNodeStatus.bind(this)}>\n                <option hidden={true}>Create Wall</option>\n                {dropdown}   \n            </select>\n\n        </div>\n    );\n}\n\nexport default NodeStatusInput;","import React from 'react';\n\nconst ClearBoardButton = props => {\n    const clearBoardHandler = () => {\n        if (!props.running) {\n            props.setClearBoard();\n        }\n    }\n\n    let running = '';\n    if (props.running) {\n        running = 'running';\n    } else {\n        running = '';\n    }\n\n    return (\n        <button onClick={clearBoardHandler} className={`button button_hover ${running}`} >Clear Board</button>\n    );\n}\n\nexport default ClearBoardButton;","import React from 'react';\n\nimport './Button.css';\nimport * as speeds from '../../data/speed';\n\nconst SpeedButton = props => {\n\n    const selectedSpeed = e => {\n        if (!props.running)\n            props.setSpeed(e.target.value);\n    }\n    \n    let running = '';\n    if (props.running) {\n        running = 'running';\n    } else {\n        running = '';\n    }\n\n    return (\n        <div>\n            <select className={`button ${running}`} onChange={selectedSpeed.bind(this)}>\n                <option value={speeds.Fast}>Speed: Fast</option>  \n                <option value={speeds.Average}>Speed: Average</option>  \n                <option value={speeds.Slow}>Speed: Slow</option>  \n            </select>\n\n        </div>\n    );\n}\n\nexport default SpeedButton;","export const Fast = 10;\nexport const Average = 30;\nexport const Slow = 50;","import React from 'react';\n\nimport AlgorithmButton from '../../components/buttons/AlgorithmButton';\nimport ClearPathButton from '../../components/buttons/ClearPathButton';\nimport ClearWallsButton from '../../components/buttons/ClearWallsButton';\nimport VisualizeButton from '../../components/buttons/VisualizeButton';\nimport NodeStatusInput from '../../components/buttons/NodeStatusInput';\nimport ClearBoardButton from '../../components/buttons/ClearBoardButton';\nimport SpeedButton from '../../components/buttons/SpeedButton';\nimport './Header.css';\n\nconst Header = props => {\n    return (\n        <div className=\"buttons_header\" >\n            <div className=\"button_index\">Pathfinding Visualizer</div>\n            <AlgorithmButton setAlgorithm={props.setAlgorithm} running={props.running} />\n            <NodeStatusInput setNodeStatus={props.setNodeStatus} running={props.running } />\n            <SpeedButton setSpeed={props.setSpeed} running={props.running } />\n            <VisualizeButton setStart={props.setStart} algo={props.algo} running={props.running} />\n            <ClearPathButton setClearPath={props.setClearPath} running={props.running} />\n            <ClearWallsButton setClearWalls={props.setClearWalls} running={props.running} />\n            <ClearBoardButton setClearBoard={props.setClearBoard} running={props.running} />\n        </div>\n    )\n}\n\nexport default Header;","import React from 'react';\n\nimport './Description.css';\nimport algorithms from '../../data/algorithms';\n\nconst Description = props => {\n    const { algorithm } = props;\n    let algoDesc = \"\";\n    if(algorithm === \"\") {\n        algoDesc = \"Pick an Algorithm!!\"\n    } else {\n        algoDesc = algorithms.map(algo => {\n            if (algo.label === algorithm) \n                return algo.desc;\n            return \"\"\n        });\n    }\n\n    return (\n        <div className=\"desc\">\n            <div className=\"nodeDesc\">\n                <div className=\"node start_node\" style={{marginLeft: \"20px\", marginRight: \"-10px\", cursor: \"default\"}}></div> Start Node\n                <div className=\"node end_node\" style={{marginLeft: \"20px\", marginRight: \"-10px\", cursor: \"default\"}}></div> Target Node\n                <div className=\"node \" style={{marginLeft: \"20px\", marginRight: \"-10px\", cursor: \"default\"}}></div> Unvisited Node\n                <div className=\"node node-visited\" style={{marginLeft: \"20px\", marginRight: \"-10px\", cursor: \"default\"}}></div> Visited Node\n                <div className=\"node wall_node\" style={{marginLeft: \"20px\", marginRight: \"-10px\", cursor: \"default\"}}></div> Wall Node\n                <div className=\"node node-shortest-path\" style={{marginLeft: \"20px\", marginRight: \"-10px\", cursor: \"default\"}}></div> Shortest-Path Node\n            </div>\n            <div className=\"algoDesc\">\n                {algoDesc}\n            </div>\n        </div>\n    )\n}\n\nexport default Description;","import React from 'react';\n\nimport './Main.css';\nimport Nav from '../../components/Nav/Nav';\nimport Header from '../header/Header';\nimport Description from '../../components/desc/Description';\n\n\nconst Main = props => (\n    <div>\n        <Nav />\n        <div className=\"body\">\n            <Header \n                setAlgorithm={props.setAlgorithm}\n                setSpeed={props.setSpeed}\n                setNodeStatus={props.setNodeStatus}\n                setClearPath={props.setClearPath}\n                setClearWalls={props.setClearWalls}\n                setClearBoard={props.setClearBoard}\n                setStart={props.setStart}\n                algo={props.algo}\n                running={props.running}\n            />\n            <Description algorithm={props.algo} />\n            { props.children }\n        </div>\n    </div>\n);\n\nexport default Main;","import React from 'react';\n\nimport './Node.css';\n\nconst Node = props => {\n    const {row, col, isWall, isStart, isEnd} = props;\n\n    const node_status = isStart ? 'start_node' : isEnd ? 'end_node' : isWall ? 'wall_node' : '';\n\n    return (\n        <div\n            id={`node-${row}-${col}`}\n            className={ `${props.className} node ${node_status}`}\n            onMouseDown={(e) => {props.onMouseDown(row, col); e.preventDefault()}}\n            onMouseEnter={() => props.onMouseEnter(row, col)}\n            onMouseUp={props.onMouseUp}\n        ></div>\n    )\n}\n\nexport default Node;","export function dijkstraVisitedNodesInOrder(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n  while (!!unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift();\n\n    if (closestNode.isWall) continue;\n\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const { col, row } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}","export function aStartVisitedNodesInOrder(grid, startNode, finishNode) {\n    const visitedNodesInOrder = [];\n\n    const openList = [];\n    const closeList = []; \n    openList.push(startNode);\n    while (openList.length > 0) {\n        let lowInd = 0;\n        for (let i=0; i<openList.length; i++) {\n            if (openList[i].f < openList[lowInd].f) { lowInd = i; }\n        }\n        const currentNode = openList[lowInd];\n        visitedNodesInOrder.push(currentNode);\n\n        if (currentNode.row === finishNode.row && currentNode.col === finishNode.col) {\n            return visitedNodesInOrder;\n        }\n\n        openList.splice(lowInd, 1);\n        closeList.push(currentNode);\n\n        const neighbors = getNeighbors(grid, currentNode);\n        for (let i=0; i<neighbors.length; i++) {\n            const neighbor = neighbors[i];\n            if (closeList.indexOf(neighbor) !== -1 || neighbor.isWall) {\n                continue;\n            }\n\n            const gScore = currentNode.g + 1;\n            let gScoreIsBest = false;\n\n            if (openList.indexOf(neighbor) === -1) {\n                gScoreIsBest = true;\n                neighbor.h = computeHeuristic(neighbor, finishNode);\n                openList.push(neighbor);\n            } else if (gScore < neighbor.g) {\n                gScoreIsBest = true;\n            }\n\n            if (gScoreIsBest) {\n                neighbor.previousNode = currentNode;\n                neighbor.g = gScore;\n                neighbor.f = neighbor.g + neighbor.h;\n            }\n        }\n    }\n    return visitedNodesInOrder;\n}\n\nfunction getNeighbors(grid, node) {\n    let ret = [];\n    const row = node.row;\n    const col = node.col;\n\n    if (grid[row-1] && grid[row-1][col]) \n        ret.push(grid[row-1][col]);\n    if(grid[row+1] && grid[row+1][col])\n        ret.push(grid[row+1][col]);\n    if (grid[row][col-1] && grid[row][col-1])\n        ret.push(grid[row][col-1]);\n    if (grid[row][col+1] && grid[row][col+1])\n        ret.push(grid[row][col+1]);\n    return ret;\n}\n\nfunction computeHeuristic(node1, node2) {\n    return Math.abs(node1.row - node2.row) + Math.abs(node1.col - node2.col);\n}\n// https://briangrinstead.com/blog/astar-search-algorithm-in-javascript/","export function bfsVisitedNodesInOrder(grid, startNode, finishNode) {\n    const visitedNodesInOrder = [];\n\n    const queue = [];\n    startNode.isVisited = true;\n    queue.push(startNode);\n\n    while (queue.length > 0) {\n        const currentNode = queue.shift();\n        visitedNodesInOrder.push(currentNode);\n\n        if (currentNode.row === finishNode.row && currentNode.col === finishNode.col) {\n            return visitedNodesInOrder;\n        }\n\n        const neighbors = getNeighbors(grid, currentNode);\n        for (let i=0; i<neighbors.length; i++) {\n            const neighbor = neighbors[i];\n            if(neighbor.isVisited || neighbor.isWall) \n                continue;\n\n            neighbor.isVisited = true;\n            neighbor.previousNode = currentNode;\n            queue.push(neighbor);\n        }\n    }\n\n    return visitedNodesInOrder;\n}\n\nfunction getNeighbors(grid, node) {\n    let ret = [];\n    const row = node.row;\n    const col = node.col;\n\n    if (grid[row-1] && grid[row-1][col]) \n        ret.push(grid[row-1][col]);\n    if(grid[row+1] && grid[row+1][col])\n        ret.push(grid[row+1][col]);\n    if (grid[row][col-1] && grid[row][col-1])\n        ret.push(grid[row][col-1]);\n    if (grid[row][col+1] && grid[row][col+1])\n        ret.push(grid[row][col+1]);\n    return ret;\n}","let found = false;\nexport function dfsVisitedNodesInOrder(grid, startNode, finishNode) {\n    const visitedNodesInOrder = [];\n    found = false;\n    dfsUtil(grid, startNode, finishNode, visitedNodesInOrder);\n    return visitedNodesInOrder;\n}\n\nfunction dfsUtil(grid, currentNode, finishNode, visitedNodesInOrder) {\n    currentNode.isVisited = true;\n    visitedNodesInOrder.push(currentNode);\n\n    if (currentNode.row === finishNode.row && currentNode.col === finishNode.col) {\n        found = true;\n        return;\n    }\n\n    const neighbors = getNeighbors(grid, currentNode);\n    for (let i=0; i<neighbors.length; i++) {\n        const neighbor = neighbors[i];\n\n        if (neighbor.isVisited || neighbor.isWall) \n            continue;\n        \n        neighbor.previousNode = currentNode;\n\n        dfsUtil(grid, neighbor, finishNode, visitedNodesInOrder);\n        if (found) return;\n        \n    }\n}\n\nfunction getNeighbors(grid, node) {\n    let ret = [];\n    const row = node.row;\n    const col = node.col;\n\n    if (grid[row-1] && grid[row-1][col]) \n        ret.push(grid[row-1][col]);\n    if(grid[row+1] && grid[row+1][col])\n        ret.push(grid[row+1][col]);\n    if (grid[row][col+1] && grid[row][col+1])\n        ret.push(grid[row][col+1]);\n    if (grid[row][col-1] && grid[row][col-1])\n        ret.push(grid[row][col-1]);\n    return ret;\n}","export function greedyVisitedNodesInOrder(grid, startNode, finishNode) {\n    const visitedNodesInOrder = [];\n\n    const openList = [];\n    const closeList = []; \n    openList.push(startNode);\n    while (openList.length > 0) {\n        let lowInd = 0;\n        for (let i=0; i<openList.length; i++) {\n            if (openList[i].h < openList[lowInd].h) { lowInd = i; }\n        }\n        const currentNode = openList[lowInd];\n        visitedNodesInOrder.push(currentNode);\n\n        if (currentNode.row === finishNode.row && currentNode.col === finishNode.col) {\n            return visitedNodesInOrder;\n        }\n\n        openList.splice(lowInd, 1);\n        closeList.push(currentNode);\n\n        const neighbors = getNeighbors(grid, currentNode);\n        for (let i=0; i<neighbors.length; i++) {\n            const neighbor = neighbors[i];\n            if (closeList.indexOf(neighbor) !== -1 || neighbor.isWall || openList.indexOf(neighbor) !== -1) {\n                continue;\n            }\n\n            neighbor.h = computeHeuristic(neighbor, finishNode);\n            openList.push(neighbor);\n            neighbor.previousNode = currentNode;\n        }\n    }\n    return visitedNodesInOrder;\n}\n\nfunction getNeighbors(grid, node) {\n    let ret = [];\n    const row = node.row;\n    const col = node.col;\n\n    if (grid[row-1] && grid[row-1][col]) \n        ret.push(grid[row-1][col]);\n    if(grid[row+1] && grid[row+1][col])\n        ret.push(grid[row+1][col]);\n    if (grid[row][col-1] && grid[row][col-1])\n        ret.push(grid[row][col-1]);\n    if (grid[row][col+1] && grid[row][col+1])\n        ret.push(grid[row][col+1]);\n    return ret;\n}\n\nfunction computeHeuristic(node1, node2) {\n    return Math.abs(node1.row - node2.row) + Math.abs(node1.col - node2.col);\n}","import React from 'react';\n\nimport './Container.css';\nimport Node from '../Node/Node';\n\nimport { dijkstraVisitedNodesInOrder } from '../../Algorithms/dijkstra';\nimport { aStartVisitedNodesInOrder } from '../../Algorithms/A*';\nimport { bfsVisitedNodesInOrder } from '../../Algorithms/bfs';\nimport { dfsVisitedNodesInOrder } from '../../Algorithms/dfs';\nimport { greedyVisitedNodesInOrder } from '../../Algorithms/greedy';\n\n\nconst Container = props => {\n    let { grid, algorithm, running, startNodePos, finishNodePos, speed } = props;\n\n    const animateShortestPath = finishNode => {\n        const shortestPathNodesInOrder = shortestPathInOrder(finishNode)\n\n        for (let i=0; i<shortestPathNodesInOrder.length; i++) {\n            if (shortestPathNodesInOrder.length === 1) {\n                alert('No Path Found...');\n                props.setStart();\n                return;\n            }\n            setTimeout(() => {\n                const node = shortestPathNodesInOrder[i];\n                document.getElementById(`node-${node.row}-${node.col}`).classList.add(`node-shortest-path`);\n            }, 4*speed*i);\n        }\n        setTimeout(() => {\n            props.setStart();\n        }, 4*speed*shortestPathNodesInOrder.length);\n    }\n\n    const animateAlgorithm = (visitedNodesInOrder, finishNode) => {\n        for (let i=0; i<visitedNodesInOrder.length; i++) {\n            setTimeout(() => {\n                const node = visitedNodesInOrder[i];\n                document.getElementById(`node-${node.row}-${node.col}`).classList.add('node-visited');\n            }, speed*i);\n        }\n\n        setTimeout(() => {\n            animateShortestPath(finishNode);\n        }, speed*visitedNodesInOrder.length);\n    }\n\n    if (running) {\n        const newGrid = clearVisitedNode(grid);\n\n        const startNode = newGrid[startNodePos.row][startNodePos.col];\n        const finishNode = newGrid[finishNodePos.row][finishNodePos.col];\n        let visitedNodesInOrder;\n        switch (algorithm) {\n            case 'Dijkstra':visitedNodesInOrder = dijkstraVisitedNodesInOrder(newGrid, startNode, finishNode); break;\n            case 'A*':      visitedNodesInOrder = aStartVisitedNodesInOrder(newGrid, startNode, finishNode); break;\n            case 'BFS':     visitedNodesInOrder = bfsVisitedNodesInOrder(newGrid, startNode, finishNode); break;\n            case 'DFS':     visitedNodesInOrder = dfsVisitedNodesInOrder(newGrid, startNode, finishNode); break;\n            case 'Greedy':  visitedNodesInOrder = greedyVisitedNodesInOrder(newGrid, startNode, finishNode); break;\n            default : break;\n        }\n        animateAlgorithm(visitedNodesInOrder, finishNode);\n    } \n\n    return (\n        <div className=\"visualizer-container\">\n            {grid.map((rowArray, rowIdx) => (\n                <div key={rowIdx}>\n                    {rowArray.map((node, nodeIdx) => (\n                        <Node\n                            key={nodeIdx}\n                            row={node.row}\n                            col={node.col}\n                            isWall={node.isWall}\n                            isStart={node.isStart}\n                            isEnd={node.isEnd}\n                            onMouseDown={props.onMouseDown}\n                            onMouseEnter={props.onMouseEnter}\n                            onMouseUp={props.onMouseUp}\n                        />\n                    ))}\n                </div>\n            ))}\n        </div>\n    )\n}\n\nconst shortestPathInOrder = finishNode => {\n    const nodesInShortestPathOrder = [];\n    let currentNode = finishNode;\n    while (currentNode !== null) {\n      nodesInShortestPathOrder.unshift(currentNode);\n      currentNode = currentNode.previousNode;\n    }\n    return nodesInShortestPathOrder;\n}\n\nconst clearVisitedNode = grid => {\n    const newGrid = grid.slice();\n    for (let i=0; i<newGrid.length; i++) {\n        const row = newGrid[i];\n        for (let j=0; j<row.length; j++) {\n            const node = row[j];\n            node.isVisited = false;\n            node.distance = Infinity;\n            node.previousNode = null;\n            document.getElementById(`node-${node.row}-${node.col}`).classList.remove('node-visited');\n            document.getElementById(`node-${node.row}-${node.col}`).classList.remove('node-shortest-path');\n        }\n    }\n    return newGrid;\n}\n\nexport default Container;","import React, { Component } from 'react';\n\nimport { ROW, COL } from '../data/constants';\nimport Main from '../layouts/main/Main';\nimport Container from '../components/container/Container';\n\nlet START_NODE_ROW = 12;\nlet START_NODE_COL = 20;\nlet END_NODE_ROW = 12;\nlet END_NODE_COL = 40;\n\nclass PathfindingVisualizer extends Component {\n    constructor() {\n        super();\n        this.state = {\n            algorithm: '',\n            node_status_input: 'wall',\n            speed: 10,\n            running: false,\n            grid: [],\n            mouseIsPressed: false,\n        }\n        this.setAlgorithmHandler = this.setAlgorithmHandler.bind(this);\n    }\n\n    componentDidMount() {\n        const grid = createInitialGrid();\n        this.setState({ grid });\n    }\n\n    setAlgorithmHandler = algo => {\n        this.setState({algorithm: algo});\n    }\n\n    setNodeStatusHandler = status => {\n        this.setState({node_status_input: status});\n    }\n\n    clearPathHandler = () => {\n        clearVisitedNode(this.state.grid);\n    }\n\n    clearWallsHandler = () => {\n        const grid = createInitialGrid();\n        this.setState({ grid });\n    }\n\n    clearBoardHandler = () => {\n        clearVisitedNode(this.state.grid);\n        const grid = createInitialGrid();\n        this.setState({ grid });\n    }\n\n    setSpeedHandler = speed => {\n        this.setState({speed: speed});\n    }\n    \n    isStartHandler = () => {\n        if (this.state.algorithm)\n            this.setState({running: !this.state.running});\n    }\n\n    mouseDownHandler = (row, col) => {\n        if (!this.state.running) {\n            if (this.state.node_status_input === 'wall' && !this.state.running) {\n                const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n                this.setState({grid: newGrid, mouseIsPressed: true});\n            } else if (this.state.node_status_input === 'start_node' && !this.state.running) {\n                const newGrid = getNewGridWithNewStartEnd(this.state.grid, row, col, 'start');\n                this.setState({grid: newGrid});\n            } else if (this.state.node_status_input === 'end_node' && !this.state.running) {\n                const newGrid = getNewGridWithNewStartEnd(this.state.grid, row, col, 'end');\n                this.setState({grid: newGrid});\n            }\n        }\n    }\n\n    mouseEnterHandler = (row, col) => {\n        if (!this.state.running) {\n            if (this.state.mouseIsPressed) {\n                const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n                this.setState({grid: newGrid, mouseIsPressed: true});\n            } else {\n                return;\n            }\n        } \n    }\n\n    mouseUpHandler = () => {\n        if (!this.state.running) {\n            this.setState({mouseIsPressed: false});\n        }\n    }\n\n\n\n    render() {\n        return (\n            <Main\n                setAlgorithm={this.setAlgorithmHandler}\n                setNodeStatus={this.setNodeStatusHandler}\n                setSpeed={this.setSpeedHandler}\n                setClearPath={this.clearPathHandler}\n                setClearWalls={this.clearWallsHandler}\n                setClearBoard={this.clearBoardHandler}\n                setStart={this.isStartHandler}\n                algo={this.state.algorithm}\n                running={this.state.running}\n            >\n                <Container\n                    grid={this.state.grid}\n                    algorithm={this.state.algorithm}\n                    speed={this.state.speed}\n                    running={this.state.running}\n                    setStart={this.isStartHandler}\n                    startNodePos={{row: START_NODE_ROW, col: START_NODE_COL}}\n                    finishNodePos={{row: END_NODE_ROW, col: END_NODE_COL}}\n                    onMouseDown={this.mouseDownHandler}\n                    onMouseEnter={this.mouseEnterHandler}\n                    onMouseUp={this.mouseUpHandler}\n                />\n            </Main>\n                \n        )\n    }\n}\n\nconst createInitialGrid = () => {\n    const grid = [];\n    for(let row=0; row<ROW; row++) {\n        const rowArray = [];\n        for(let col=0; col<COL; col++) {\n            rowArray.push(createNode(row, col));\n        }\n        grid.push(rowArray);\n    }\n    return grid;\n}\n\nconst createNode = (row, col) => (\n    {\n        row,\n        col,\n        isWall: false,\n        isStart: row === START_NODE_ROW && col === START_NODE_COL,\n        isEnd: row === END_NODE_ROW && col === END_NODE_COL,\n        distance: Infinity,\n        isVisited: false,\n        previousNode: null,\n        f : 0,\n        g : 0,\n        h : 0\n    }\n)\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n    const newGrid = grid.slice();\n    const node = newGrid[row][col];\n    const wall = !node.isWall;\n    const newNode = {\n        ...node,\n        isWall: wall\n    }\n    newGrid[row][col] = newNode;\n    return newGrid;\n}\n\nconst getNewGridWithNewStartEnd = (grid, row, col, state) => {\n    const newGrid = grid.slice();\n    const node = newGrid[row][col];\n    let prevNode = {};\n    if (state === 'start') {\n        prevNode = newGrid[START_NODE_ROW][START_NODE_COL];\n        prevNode.isStart = false;\n        node.isStart = true;\n        newGrid[START_NODE_ROW][START_NODE_COL] = prevNode;\n        newGrid[row][col] = node;\n        START_NODE_ROW = row;\n        START_NODE_COL = col;\n    } else if (state === 'end') {\n        prevNode = newGrid[END_NODE_ROW][END_NODE_COL];\n        prevNode.isEnd = false;\n        node.isEnd = true;\n        newGrid[END_NODE_ROW][END_NODE_COL] = prevNode;\n        newGrid[row][col] = node;\n        END_NODE_ROW = row;\n        END_NODE_COL = col;\n    }\n    return newGrid;\n}\n\nconst clearVisitedNode = grid => {\n    const newGrid = grid.slice();\n    for (let i=0; i<newGrid.length; i++) {\n        const row = newGrid[i];\n        for (let j=0; j<row.length; j++) {\n            const node = row[j];\n            node.isVisited = false;\n            node.distance = Infinity;\n            node.previousNode = null;\n            document.getElementById(`node-${node.row}-${node.col}`).classList.remove('node-visited');\n            document.getElementById(`node-${node.row}-${node.col}`).classList.remove('node-shortest-path');\n        }\n    }\n    return newGrid;\n}\n\nexport default PathfindingVisualizer;","export const ROW = 30;\nexport const COL = 65;","import React from 'react';\n\nimport PathfindingVisualizer from './App/views/PathfindingVisualizer';\n\nfunction App() {\n  return (\n    <PathfindingVisualizer />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}